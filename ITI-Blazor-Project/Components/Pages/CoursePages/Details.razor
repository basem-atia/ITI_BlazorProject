@page "/courses/details"
@using Microsoft.EntityFrameworkCore
@using ITI_Blazor_Project
@inject IDbContextFactory<ITI_Blazor_Project.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Course</h2>
    <hr />
    @if (Course is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@Course.Title</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@Course.Description</dd>
            <dt class="col-sm-2">InstructorId</dt>
            <dd class="col-sm-10">@Course.InstructorId</dd>
        </dl>
        <div>
            <a href="@($"/courses/edit?id={Course.Id}")">Edit</a> |
            <a href="/courses">Back to List</a>
        </div>
    }
</div>

@code {
    private Course? Course;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == Guid.Empty)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        using var context = DbFactory.CreateDbContext();
        Course = await context.Courses.FirstOrDefaultAsync(c => c.Id == Id);

        if (Course is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
