@page "/choices"
@using Microsoft.EntityFrameworkCore
@using ITI_Blazor_Project
@inject IDbContextFactory<ITI_Blazor_Project.Data.ApplicationDbContext> DbFactory

<PageTitle>Choices</PageTitle>
@{
    int questionNumber = 1;
}
<style>
    body {
        background: linear-gradient(135deg, #a8dadc, #cdb4db);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .choices-header {
        margin-left: 3rem;
        margin-top: 2rem;
        margin-bottom: 1rem;
        font-size: 1.25rem;
        font-weight: 700;
        color: #2c3e50;
    }

    .choices-actions {
        margin-right: 3rem;
    }

    .card-choice {
        width: 90%;
        border-radius: 16px;
        box-shadow: 0 8px 18px rgba(0, 0, 0, 0.12);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        background: #fff;
        border: none;
        cursor: default;
        display: flex;
        flex-direction: column;
        margin-bottom: 2.3rem !important;
        margin-left:auto;
        margin-right:auto;
    }

        .card-choice:hover {
            transform: translateY(-6px);
            box-shadow: 0 14px 28px rgba(0, 0, 0, 0.2);
        }

    .card-body-choice {
        padding: 1.75rem 2rem;
    }

    .card-title-choice {
        font-size: 1.2rem;
        font-weight: 800;
        color: #1d3557;
        margin-bottom: 1rem;
    }

    .choice-item {
        background-color: #f8f9fa;
        padding: 0.75rem 1rem;
        border-radius: 12px;
        margin-bottom: 0.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: background-color 0.2s ease;
    }

        .choice-item:hover {
            background-color: #e3e6ea;
        }

    .choice-text {
        font-size: 1rem;
        color: #333;
        flex: 1;
    }

    .badge-correct {
        background-color: #d4edda;
        color: #155724;
        font-size: 0.8rem;
        padding: 0.3rem 0.7rem;
        border-radius: 1rem;
        font-weight: 600;
        margin-right: 1rem;
    }

    .choice-actions {
        display: flex;
        gap: 0.5rem;
    }

    .btn-outline-secondary:hover {
        background-color: #6c757d;
        color: #fff;
    }

    .btn-outline-primary:hover {
        background-color: #4361ee;
        color: #fff;
        border-color: #4361ee;
    }

    .btn-outline-danger:hover {
        background-color: #dc3545;
        color: #fff;
        border-color: #dc3545;
    }
</style>

<div class="d-flex align-items-center justify-content-between mb-3 mt-3">
    <h1 class="choices-header badge bg-light shadow-sm rounded-pill">
        <i class="bi bi-ui-checks me-2"></i> Choices
    </h1>
    <div class="choices-actions">
        <a class="btn btn-primary" href="/choices/create">
            <i class="bi bi-plus-circle me-1"></i> Create New Choice
        </a>
    </div>
</div>

@if (choicesByQuestion is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!choicesByQuestion.Any())
{
    <div class="alert alert-info text-center mt-4">No choices found.</div>
}
else
{
    @foreach (var group in choicesByQuestion)
    {
        <div class="card card-choice m-2 mx-auto mb-5">
            <div class="card-body card-body-choice">
                <h5 class="card-title-choice"><span class="badge bg-dark pt-2 pb-2">Q @questionNumber: </span> @group.Key</h5>
                @foreach (var choice in group.Value)
                {
                    <div class="choice-item">
                        <span class="choice-text">@choice.Text</span>
                        <div class="d-flex align-items-center">
                            @if (choice.IsCorrect)
                            {
                                <span class="badge-correct">Correct</span>
                            }
                            <div class="choice-actions">
                                <a class="btn btn-sm btn-outline-secondary" href="@($"/choices/details?id={choice.Id}")" title="Details">
                                    <i class="bi bi-eye"></i>
                                </a>
                                <a class="btn btn-sm btn-outline-primary" href="@($"/choices/edit?id={choice.Id}")" title="Edit">
                                    <i class="bi bi-pencil-square"></i>
                                </a>
                                <a class="btn btn-sm btn-outline-danger" href="@($"/choices/delete?id={choice.Id}")" title="Delete">
                                    <i class="bi bi-trash"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        questionNumber++;
    }
}

@code {
    private Dictionary<string, List<Choice>>? choicesByQuestion;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        var choices = await context.Choices
            .Include(c => c.Question)
            .ToListAsync();

        choicesByQuestion = choices
            .Where(c => c.Question != null)
            .GroupBy(c => c.Question!.Text)
            .ToDictionary(g => g.Key, g => g.ToList());
    }
}
