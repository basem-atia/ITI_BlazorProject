@page "/choices/create"
@using ITI_Blazor_Project.Data
@using Microsoft.EntityFrameworkCore
@using ITI_Blazor_Project
@inject IDbContextFactory<ITI_Blazor_Project.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1 class="pt-5 pb-5">Create Choice</h1>

<hr class="me-10" />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Choice" OnValidSubmit="AddChoice" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="text" class="form-label">Text:</label> 
                <InputText id="text" @bind-Value="Choice.Text" class="form-control" /> 
                <ValidationMessage For="() => Choice.Text" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="iscorrect" class="form-label">IsCorrect:</label> 
                <InputCheckbox id="iscorrect" @bind-Value="Choice.IsCorrect" class="form-check-input" /> 
                <ValidationMessage For="() => Choice.IsCorrect" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="questionid" class="form-label">QuestionId:</label> 
                @* <InputText id="questionid" @bind-Value="QuestionIdString" class="form-control" />  *@
                <InputSelect id="questionid" @bind-Value="Choice.QuestionId">
                    <option value="@Guid.Empty">-- Select Question --</option>
                    @foreach (var question in Questions)
                    {
                        <option value="@question.Id">@question.Text</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Choice.QuestionId" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/choices">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Choice Choice { get; set; } = new();
    private List<Question> Questions = new List<Question>();
    // private string QuestionIdString
    // {
    //     get => Choice.QuestionId.ToString();
    //     set
    //     {
    //         if (Guid.TryParse(value, out var guid))
    //         {
    //             Choice.QuestionId = guid;
    //         }
    //     }
    // }
    protected override async Task OnInitializedAsync()
    {
        await using ApplicationDbContext context = await DbFactory.CreateDbContextAsync();
        Questions = await context.Questions.ToListAsync();
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddChoice()
    {
        if (Choice.QuestionId == Guid.Empty)
        {
            return;
        }
        using var context = DbFactory.CreateDbContext();
        context.Choices.Add(Choice);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/choices");
    }
}
