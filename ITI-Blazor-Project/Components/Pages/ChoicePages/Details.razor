@page "/choices/details"
@using Microsoft.EntityFrameworkCore
@using ITI_Blazor_Project
@inject IDbContextFactory<ITI_Blazor_Project.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1 class="pt-5 pb-5">Details</h1>

<div>
    <h2>Choice</h2>
    <hr />
    @if (choice is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Text</dt>
            <dd class="col-sm-10">@choice.Text</dd>
            <dt class="col-sm-2">IsCorrect</dt>
            <dd class="col-sm-10">@choice.IsCorrect</dd>
            <dt class="col-sm-2">QuestionId</dt>
            <dd class="col-sm-10">@choice.Question?.Text</dd>
        </dl>
        <div>
            <a href="@($"/choices/edit?id={choice.Id}")">Edit</a> |
            <a href="@($"/choices")">Back to List</a>
        </div>
    }
</div>

@code {
    private Choice? choice;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        choice = await context.Choices.Include(c=>c.Question).FirstOrDefaultAsync(m => m.Id == Id);

        if (choice is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
