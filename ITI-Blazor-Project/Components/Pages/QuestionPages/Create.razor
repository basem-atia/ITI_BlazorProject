@page "/questions/create"
@using Microsoft.EntityFrameworkCore
@using ITI_Blazor_Project
@inject IDbContextFactory<ITI_Blazor_Project.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create Question</PageTitle>

<style>
    .form-container {
        background: linear-gradient(135deg, #a8dadc, #cdb4db);
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }

    .custom-card {
        background-color: #f8f9fa;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        padding: 2rem;
        width: 100%;
        max-width: 700px;
    }

    .form-label {
        font-weight: 600;
    }

    .form-title {
        font-size: 1.5rem;
        font-weight: bold;
        color: #5f27cd;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .btn-custom {
        
        border: none;
        color: white;
        font-weight: 600;
    }

        .btn-custom:hover {
            opacity: 0.9;
        }

    .btn-cancel {
        background-color: #dee2e6;
        font-weight: 600;
    }

        .btn-cancel:hover {
            background-color: #ced4da;
        }
</style>

<div class="form-container">
    <div class="custom-card">
        <div class="form-title">Create New Question</div>

        <EditForm Model="Question" OnValidSubmit="AddQuestion">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="mb-3">
                <label for="text" class="form-label">Question Text</label>
                <InputText id="text" @bind-Value="Question.Text" class="form-control" />
                <ValidationMessage For="() => Question.Text" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="course" class="form-label">Related Course</label>
                <InputSelect id="course" @bind-Value="Question.CourseId" class="form-select">
                    <option value="">-- Select Course --</option>
                    @foreach (var course in Courses)
                    {
                        <option value="@course.Id">@course.Title</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Question.CourseId" class="text-danger" />
            </div>

            <div class="d-flex justify-content-between mt-4">
                <a href="/questions" class="btn btn-cancel px-4">
                    <i class="bi bi-arrow-left me-1"></i> Cancel
                </a>
                <button type="submit" class="btn btn-dark px-4">
                    <i class="bi bi-check-circle me-1"></i> Create Question
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private Question Question { get; set; } = new();
    private List<Course> Courses { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Courses = await context.Courses.ToListAsync();
    }

    private async Task AddQuestion()
    {
        if (Question.CourseId == Guid.Empty)
            return;

        using var context = DbFactory.CreateDbContext();
        context.Questions.Add(Question);
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/questions");
    }
}
