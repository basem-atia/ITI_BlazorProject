@page "/questions/create"
@using Microsoft.EntityFrameworkCore
@using ITI_Blazor_Project
@inject IDbContextFactory<ITI_Blazor_Project.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>
<h2>Question</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Question" OnValidSubmit="AddQuestion">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="text" class="form-label">Text:</label>
                <InputText id="text" @bind-Value="Question.Text" class="form-control" />
                <ValidationMessage For="() => Question.Text" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="course" class="form-label">Course:</label>
                <InputSelect id="course" @bind-Value="Question.CourseId" class="form-select">
                    <option value="">-- Select Course --</option>
                    @foreach (var course in Courses)
                    {
                        <option value="@course.Id">@course.Title</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Question.CourseId" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/questions">Back to List</a>
</div>

@code {
    private Question Question { get; set; } = new();
    private List<Course> Courses { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Courses = await context.Courses.ToListAsync();
    }

    private async Task AddQuestion()
    {
        if (Question.CourseId == Guid.Empty)
            return;

        using var context = DbFactory.CreateDbContext();
        context.Questions.Add(Question);
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/questions");
    }
}
