@page "/examquestions"
@using Microsoft.EntityFrameworkCore
@using ITI_Blazor_Project
@using ITI_Blazor_Project.Data
@implements IAsyncDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageTitle>Exam Questions</PageTitle>

<style>
    .exam-wrapper {
        padding: 2rem 1rem;
        background: linear-gradient(to right, #fef6e4, #e0f7fa);
        min-height: 100vh;
    }

    .exam-card {
        border-radius: 1.5rem;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.2s ease;
    }

        .exam-card:hover {
            transform: scale(1.01);
        }

    .exam-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .question-block {
        background-color: #f8f9fa;
        border-radius: 1rem;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .choice-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #ffffff;
        border: 1px solid #dee2e6;
        padding: 0.75rem 1rem;
        border-radius: 0.5rem;
        margin-bottom: 0.5rem;
    }

        .choice-item.correct {
            background-color: #d4edda;
            border-color: #c3e6cb;
        }

    .correct-badge {
        background-color: #198754;
        color: white;
        padding: 0.3rem 0.6rem;
        border-radius: 0.4rem;
        font-size: 0.85rem;
    }

    .assign-btn {
        margin-bottom: 2rem;
    }
</style>

<div class="exam-wrapper">
    <div class="d-flex align-items-center justify-content-between">
        <h1 class="mb-4 badge bg-dark text-white-50 text-body p-3" style="font-size:19px;">Exam Questions</h1>

        <p class="assign-btn">
            <a href="/examquestions/create" class="btn btn-dark">
                <i class="bi bi-plus-circle"></i> Assign Questions to Exam
            </a>
        </p>
    </div>

    @if (ExamsWithQuestions == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!ExamsWithQuestions.Any())
    {
        <p class="text-muted">No exams found with assigned questions.</p>
    }
    else
    {
        @foreach (var exam in ExamsWithQuestions)
        {
            <div class="card exam-card mb-5">
                <div class="card-header bg-dark text-white exam-title">
                    <i class="bi bi-journal-text"></i> @exam.Title
                </div>
                <div class="card-body">
                    @if (exam.ExamQuestions.Any())
                    {
                        @foreach (var eq in exam.ExamQuestions)
                        {
                            <div class="question-block">
                                <div class="fw-bold mb-2">Q@((exam.ExamQuestions.ToList().IndexOf(eq) + 1)): @eq.Question.Text</div>
                                @foreach (var choice in eq.Question.Choices)
                                {
                                    <div class="choice-item @(choice.IsCorrect ? "correct" : "")">
                                        @choice.Text
                                        @if (choice.IsCorrect)
                                        {
                                            <span class="correct-badge"><i class="bi bi-check-circle-fill"></i> Correct</span>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No questions assigned.</p>
                    }
                </div>
            </div>
        }
    }
</div>

@code {
    private ApplicationDbContext context = default!;
    private List<Exam> ExamsWithQuestions = new();

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        ExamsWithQuestions = await context.Exams
            .Include(e => e.ExamQuestions)
                .ThenInclude(eq => eq.Question)
                    .ThenInclude(q => q.Choices)
            .ToListAsync();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
