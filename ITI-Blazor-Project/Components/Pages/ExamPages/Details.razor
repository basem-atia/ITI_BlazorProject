@page "/exams/details"
@using Microsoft.EntityFrameworkCore
@using ITI_Blazor_Project
@inject IDbContextFactory<ITI_Blazor_Project.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Exam Details</PageTitle>

<style>
    body {
        background: linear-gradient(135deg, #bde0fe, #e0c3fc);
        min-height: 100vh;
        margin: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .exam-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 90vh;
        padding: 3rem 1rem;
    }

    .exam-card {
        background-color: rgba(255, 255, 255, 0.92);
        border-radius: 1.5rem;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        padding: 3rem 2.5rem;
        max-width: 650px;
        width: 100%;
        transition: box-shadow 0.3s ease;
    }

        .exam-card:hover {
            box-shadow: 0 12px 28px rgba(0, 0, 0, 0.2);
        }

    .exam-label {
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background-color: #6c757d;
        color: white;
        padding: 0.4rem 0.75rem;
        border-radius: 0.5rem;
        font-size: 0.95rem;
    }

    .exam-value {
        color: #212529;
        font-size: 1.1rem;
        /* padding-top: 0.5rem; */
    }

    .btn-actions {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 2.5rem;
    }

    .btn {
        min-width: 120px;
        font-weight: 500;
        font-size: 1rem;
    }

    .exam-title {
        text-align: center;
        font-weight: 700;
        font-size: 2.2rem;
        color: #343a40;
        margin-bottom: 2rem;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 0.75rem;
    }

    i.bi {
        font-size: 1.2rem;
        color: ghostwhite;
        margin-right:5px;
    }
</style>



<div class="exam-wrapper">
    @if (exam is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="exam-card">
            <div class="exam-title">
                <i class="bi bi-journal-text"></i>
                @exam.Title
            </div>
            <hr class="mb-6" />
            <dl class="row gy-3">
                <dt class="col-sm-4 mb-2 mt-2">
                    <span class="exam-label w-75"><i class="bi bi-calendar-event "></i> Date</span>
                </dt>
                <dd class="col-sm-8 exam-value ">@exam.Date?.ToString("yyyy-MM-dd HH:mm")</dd>

                <dt class="col-sm-4 mb-2 mt-2">
                    <span class="exam-label w-75"><i class="bi bi-clock "></i> Duration</span>
                </dt>
                <dd class="col-sm-8 exam-value">@exam.Duration.ToString(@"hh\:mm")</dd>

                <dt class="col-sm-4 mb-2 mt-2">
                    <span class="exam-label w-75"><i class="bi bi-person "></i> Instructor</span>
                </dt>
                <dd class="col-sm-8 exam-value">@exam.Instructor?.Name</dd>
            </dl>

            <div class="btn-actions">
                <a class="btn btn-dark" href="@($"/exams/edit?id={exam.Id}")">
                    <i class="bi bi-pencil-square"></i> Edit
                </a>
                <a class="btn btn-danger" href="/exams">
                    <i class="bi bi-arrow-left-circle"></i> Back
                </a>
            </div>
        </div>
    }
</div>

@code {
    private Exam? exam;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        exam = await context.Exams.Include(e => e.Instructor).FirstOrDefaultAsync(m => m.Id == Id);

        if (exam is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
