@page "/exams/details"
@using Microsoft.EntityFrameworkCore
@using ITI_Blazor_Project
@inject IDbContextFactory<ITI_Blazor_Project.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1 class="pt-5 pb-5">Details</h1>

<div>
    <h2>Exam</h2>
    <hr />
    @if (exam is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@exam.Title</dd>
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@exam.Date?.ToString("yyyy-MM-dd HH:mm")</dd>
            <dt class="col-sm-2">Duration</dt>
            <dd class="col-sm-10">@exam.Duration.ToString(@"hh\:mm")</dd>
            <dt class="col-sm-2">Instructor Name</dt>
            <dd class="col-sm-10">@exam.Instructor?.Name</dd>
        </dl>
        <div>
            <a href="@($"/exams/edit?id={exam.Id}")">Edit</a> |
            <a href="@($"/exams")">Back to List</a>
        </div>
    }
</div>

@code {
    private Exam? exam;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        exam = await context.Exams.Include(e=>e.Instructor).FirstOrDefaultAsync(m => m.Id == Id);

        if (exam is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
