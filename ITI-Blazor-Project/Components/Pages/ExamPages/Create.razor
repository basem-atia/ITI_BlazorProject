@page "/exams/create"
@using ITI_Blazor_Project.Data
@using Microsoft.EntityFrameworkCore
@using ITI_Blazor_Project
@using MudBlazor
@inject IDbContextFactory<ITI_Blazor_Project.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@implements IAsyncDisposable

<div class="create-exam-container">
   

    <!-- Main Form Section -->
    <div class="form-section">
        <div class="container pt-8">
            <div class="form-wrapper">
                <EditForm method="post" Model="Exam" OnValidSubmit="AddExam" FormName="create" Enhance>
                    <DataAnnotationsValidator />

                    

                    <!-- Validation Summary -->
                    <ValidationSummary class="alert alert-danger validation-summary" role="alert" />

                    <!-- Form Fields -->
                    <div class="form-grid">
                        <!-- Exam Title -->
                        <div class="form-group">
                            <label for="title" class="form-label">
                                <svg class="label-icon" width="16" height="16" viewBox="0 0 24 24" fill="none">
                                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z" stroke="currentColor" stroke-width="2" />
                                    <polyline points="14,2 14,8 20,8" stroke="currentColor" stroke-width="2" />
                                </svg>
                                Exam Title
                            </label>
                            <div class="input-wrapper">
                                <InputText id="title" @bind-Value="Exam.Title" class="form-control" placeholder="Enter a clear, descriptive exam title..." />
                                <div class="input-border"></div>
                            </div>
                            <ValidationMessage For="() => Exam.Title" class="validation-message" />
                        </div>

                        <!-- Exam Date -->
                        <div class="form-group">
                            <label for="date" class="form-label">
                                <svg class="label-icon" width="16" height="16" viewBox="0 0 24 24" fill="none">
                                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2" stroke="currentColor" stroke-width="2" />
                                    <line x1="16" y1="2" x2="16" y2="6" stroke="currentColor" stroke-width="2" />
                                    <line x1="8" y1="2" x2="8" y2="6" stroke="currentColor" stroke-width="2" />
                                    <line x1="3" y1="10" x2="21" y2="10" stroke="currentColor" stroke-width="2" />
                                </svg>
                                Exam Date
                            </label>
                            <div class="input-wrapper">
                                <InputDate id="date" @bind-Value="Exam.Date" class="form-control" />
                                <div class="input-border"></div>
                            </div>
                            <ValidationMessage For="() => Exam.Date" class="validation-message" />
                        </div>

                        <!-- Duration -->
                        <div class="form-group">
                            <label for="duration" class="form-label">
                                <svg class="label-icon" width="16" height="16" viewBox="0 0 24 24" fill="none">
                                    <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" />
                                    <polyline points="12,6 12,12 16,14" stroke="currentColor" stroke-width="2" />
                                </svg>
                                Duration
                            </label>
                            <div class="input-wrapper">
                                <InputText id="duration" @bind-Value="DurationString" class="form-control" placeholder="e.g., 01:30 (1 hour 30 minutes)" />
                                <div class="input-border"></div>
                                <div class="input-hint">Format: HH:MM (hours:minutes)</div>
                            </div>
                            <ValidationMessage For="() => DurationString" class="validation-message" />
                            @if (!string.IsNullOrEmpty(DurationError))
                            {
                                <div class="validation-message">@DurationError</div>
                            }
                        </div>

                        <!-- Instructor Selection -->
                        <div class="form-group full-width">
                            <label for="instructorid" class="form-label">
                                <svg class="label-icon" width="16" height="16" viewBox="0 0 24 24" fill="none">
                                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" stroke="currentColor" stroke-width="2" />
                                    <circle cx="12" cy="7" r="4" stroke="currentColor" stroke-width="2" />
                                </svg>
                                Assigned Instructor
                            </label>
                            <div class="select-wrapper">
                                @if (Instructors?.Any() == true)
                                {
                                    <InputSelect @bind-Value="@Exam.InstructorId" class="form-select">
                                        <option value="@Guid.Empty">Select an instructor...</option>
                                        @foreach (var instructor in Instructors)
                                        {
                                            <option value="@instructor.Id">@instructor.Name</option>
                                        }
                                    </InputSelect>
                                    <div class="select-arrow">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none">
                                            <polyline points="6,9 12,15 18,9" stroke="currentColor" stroke-width="2" />
                                        </svg>
                                    </div>
                                }
                                else
                                {
                                    <div class="loading-state">
                                        <div class="spinner"></div>
                                        <span>Loading instructors...</span>
                                    </div>
                                }
                            </div>
                            <ValidationMessage For="() => Exam.InstructorId" class="validation-message" />
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="form-actions">
                        <a href="/exams" class="btn btn-secondary">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                                <polyline points="15,18 9,12 15,6" stroke="currentColor" stroke-width="2" />
                            </svg>
                            Cancel
                        </a>
                        <button type="submit" class="btn btn-primary">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                                <polyline points="20,6 9,17 4,12" stroke="currentColor" stroke-width="2" />
                            </svg>
                            Create Exam
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<style>
    .create-exam-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        position: relative;
    }

    .create-exam-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.05)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.05)"/><circle cx="50" cy="10" r="0.5" fill="rgba(255,255,255,0.03)"/><circle cx="20" cy="80" r="0.5" fill="rgba(255,255,255,0.03)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
        pointer-events: none;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    /* Header Section */
    .page-header {
        padding: 2rem 0;
        position: relative;
        z-index: 1;
    }

    .header-content {
        display: flex;
        align-items: center;
        gap: 1rem;
        color: white;
    }

    .header-icon {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        padding: 0.75rem;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .header-text h1 {
        margin: 0;
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
    }

    .header-text p {
        margin: 0;
        opacity: 0.9;
        font-size: 1rem;
    }

    /* Form Section */
    .form-section {
        position: relative;
        z-index: 1;
        padding-bottom: 2rem;
    }

    .form-wrapper {
        background: linear-gradient(135deg, #c0cddb 0%, #e2e8f0 100%);
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
        padding: 2.5rem;
        max-width: 800px;
        margin: 0 auto;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    
    /* Form Grid */
    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .form-group.full-width {
        grid-column: 1 / -1;
    }

    /* Form Groups */
    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .form-label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 600;
        color: #374151;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
    }

    .label-icon {
        color: #667eea;
    }

    /* Input Styling */
    .input-wrapper {
        position: relative;
    }

    .form-control, .form-select {
        width: 100%;
        padding: 0.875rem 1rem;
        border: 2px solid #e5e7eb;
        border-radius: 10px;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        background: #fafbfc;
        position: relative;
    }

    .form-control:focus, .form-select:focus {
        outline: none;
        border-color: #667eea;
        background: white;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .input-border {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 2px;
        background: linear-gradient(90deg, #667eea, #764ba2);
        transform: scaleX(0);
        transition: transform 0.3s ease;
        border-radius: 0 0 10px 10px;
    }

    .form-control:focus + .input-border {
        transform: scaleX(1);
    }

    .input-hint {
        font-size: 0.75rem;
        color: #6b7280;
        margin-top: 0.25rem;
    }

    /* Select Wrapper */
    .select-wrapper {
        position: relative;
    }

    .select-arrow {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        pointer-events: none;
        color: #6b7280;
    }

    /* Loading State */
    .loading-state {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 1rem;
        background: #f3f4f6;
        border-radius: 10px;
        color: #6b7280;
    }

    .spinner {
        width: 16px;
        height: 16px;
        border: 2px solid #e5e7eb;
        border-top: 2px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }



    /* Validation */
    .validation-summary {
        margin-bottom: 1.5rem;
        border-radius: 10px;
        border: none;
        background: #fef2f2;
        color: #dc2626;
        border-left: 4px solid #dc2626;
    }

    .validation-message {
        color: #dc2626;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    /* Action Buttons */
    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: end;
        padding-top: 1.5rem;
        border-top: 1px solid #e5e7eb;
    }

    .btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.875rem 1.5rem;
        border-radius: 10px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
        font-size: 0.95rem;
    }

    .btn-secondary {
        background: #f3f4f6;
        color: #374151;
    }

    .btn-secondary:hover {
        background: #e5e7eb;
        transform: translateY(-2px);
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
    }

    
</style>
@code {
    private Exam Exam { get; set; } = new();
    private ApplicationDbContext context = default!;
    private List<Instructor> Instructors = new();
    private List<Question> Questions = new();
    private string? DurationError { get; set; }

    private string DurationString
    {
        get => Exam.Duration.ToString(@"hh\:mm");
        set
        {
            if (TimeSpan.TryParse(value, out var result))
            {
                Exam.Duration = result;
                DurationError = null;
            }
            else
            {
                DurationError = "Please enter duration in HH:mm format (e.g., 1:30)";
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        Instructors = await context.Instructors.ToListAsync();
        Questions = await context.Questions.ToListAsync();
    }

    private async Task AddExam()
    {
        if (Exam.InstructorId == Guid.Empty || !string.IsNullOrEmpty(DurationError))
            return;

        context.Exams.Add(Exam);
        await context.SaveChangesAsync();

        Snackbar.Add("✅ Exam created successfully!", Severity.Success, config =>
        {
            config.VisibleStateDuration = 4000;
            config.ShowCloseIcon = true;
            config.SnackbarVariant = Variant.Filled;
        });

        NavigationManager.NavigateTo("/exams");
    }

    public async ValueTask DisposeAsync()
    {
        if (context is not null)
        {
            await context.DisposeAsync();
        }
    }
}
