@page "/exams/edit"
@using Microsoft.EntityFrameworkCore
@using ITI_Blazor_Project
@inject IDbContextFactory<ITI_Blazor_Project.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Exam</PageTitle>

<style>
    .edit-container {
        background: linear-gradient(135deg, #a8dadc, #cdb4db);
        ;
        min-height: 100vh;
        padding: 2rem;
        display: flex;
        justify-content: center;
        align-items: flex-start;
    }

    .edit-card {
        background-color: white;
        border-radius: 20px;
        padding: 2rem;
        box-shadow: 0 10px 25px rgba(0,0,0,0.08);
        width: 100%;
        max-width: 600px;
    }

    .btn-save {
        background: linear-gradient(to right, #7b2ff7, #f107a3);
        border: none;
        color: white;
        font-weight: 600;
        transition: 0.3s ease;
    }

        .btn-save:hover {
            opacity: 0.9;
            transform: scale(1.03);
        }

    .btn-back {
        font-weight: 600;
        background-color: #e9ecef;
        color: #212529;
        transition: 0.3s ease;
    }

        .btn-back:hover {
            background-color: #ced4da;
            transform: scale(1.03);
        }
</style>

<div class="edit-container">
    <div class="edit-card">
        <h2 class="mb-4 text-center">Edit Exam</h2>

        @if (Exam is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <EditForm Model="Exam" OnValidSubmit="UpdateExam">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <input type="hidden" value="@Exam.Id" />

                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="Exam.Title" class="form-control" />
                    <ValidationMessage For="() => Exam.Title" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="date" class="form-label">Date:</label>
                    <InputDate id="date" @bind-Value="Exam.Date" class="form-control" />
                    <ValidationMessage For="() => Exam.Date" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="duration" class="form-label">Duration (hh:mm):</label>
                    <InputText id="duration" @bind-Value="DurationString" class="form-control" />
                    <ValidationMessage For="() => DurationString" class="text-danger" />
                    @if (!string.IsNullOrEmpty(DurationError))
                    {
                        <div class="text-danger">@DurationError</div>
                    }
                </div>

                <div class="mb-3">
                    <label for="instructorid" class="form-label">Instructor:</label>
                    <InputSelect id="instructorid" @bind-Value="Exam.InstructorId" class="form-select">
                        <option value="">-- Select Instructor --</option>
                        @foreach (var instructor in Instructors)
                        {
                            <option value="@instructor.Id">@instructor.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Exam.InstructorId" class="text-danger" />
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <a href="/exams" class="btn btn-back">
                        <i class="bi bi-arrow-left"></i> Back
                    </a>
                    <button type="submit" class="btn btn-save px-4">
                        <i class="bi bi-save me-1"></i> Save
                    </button>
                </div>
            </EditForm>
        }
    </div>
</div>


@code {
    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    [SupplyParameterFromForm]
    private Exam? Exam { get; set; }
    private string DurationString
    {
        get => Exam.Duration.ToString(@"hh\:mm"); 
        set
        {
            if (TimeSpan.TryParse(value, out var result))
            {
                Exam.Duration = result;
            }
            else
            {
                DurationError = "Please enter duration in HH:mm format, like 1:30.";
            }
        }
    }
    private string? DurationError { get; set; }
    private List<Instructor> Instructors = new List<Instructor>();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Instructors = await context.Instructors.ToListAsync();
        Exam ??= await context.Exams.Include(e=>e.Instructor).FirstOrDefaultAsync(m => m.Id == Id);
        if (Exam is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateExam()
    {
        if (!string.IsNullOrEmpty(DurationError))
            return;
        using var context = DbFactory.CreateDbContext();
        // context.Attach(Exam!).State = EntityState.Modified;
        // context.Entry(Exam!).CurrentValues.SetValues(Exam!);

        var dbExam = await context.Exams.Include(e=>e.Instructor).FirstOrDefaultAsync(e => e.Id == Exam!.Id);
        if (dbExam is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        context.Entry(dbExam).CurrentValues.SetValues(Exam!);

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ExamExists(Exam!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/exams");
    }

    private bool ExamExists(Guid id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Exams.Any(e => e.Id == id);
    }
}
