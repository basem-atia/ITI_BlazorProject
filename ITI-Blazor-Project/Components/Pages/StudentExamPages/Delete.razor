@page "/studentexams/delete"
@using Microsoft.EntityFrameworkCore
@using ITI_Blazor_Project
@inject IDbContextFactory<ITI_Blazor_Project.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>StudentExam</h2>
    <hr />
    @if (studentexam is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Id</dt>
            <dd class="col-sm-10">@studentexam.Id</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AssignedAt</dt>
            <dd class="col-sm-10">@studentexam.AssignedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">SubmittedAt</dt>
            <dd class="col-sm-10">@studentexam.SubmittedAt</dd>
        </dl>
        <EditForm method="post" Model="studentexam" OnValidSubmit="DeleteStudentExam" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(studentexam is null)">Delete</button> |
            <a href="/studentexams">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private StudentExam? studentexam;

    [SupplyParameterFromQuery]
    private Guid? StudentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        studentexam = await context.StudentExams.FirstOrDefaultAsync(m => m.StudentId == StudentId);

        if (studentexam is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteStudentExam()
    {
        using var context = DbFactory.CreateDbContext();
        context.StudentExams.Remove(studentexam!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/studentexams");
    }
}
