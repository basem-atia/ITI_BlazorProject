@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ITI_Blazor_Project.Data
@using ITI_Blazor_Project
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext dbContext

<PageTitle>Register</PageTitle>
<style>
    .register-container {
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        background-attachment: fixed;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        padding: 2rem;
        position: relative;
        overflow: hidden;
    }

        .register-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%), radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%);
            animation: backgroundMove 20s ease-in-out infinite;
        }

    @@keyframes backgroundMove {
        0%, 100% {
            opacity: 1;
            transform: scale(1);
        }

        50% {
            opacity: 0.8;
            transform: scale(1.1);
        }
    }

    .register-card {
        background: rgba(255, 255, 255, 0.08);
        border-radius: 24px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12), 0 0 0 1px rgba(255, 255, 255, 0.05), inset 0 1px 0 rgba(255, 255, 255, 0.1);
        padding: 3rem 2.5rem;
        width: 100%;
        max-width: 480px;
        backdrop-filter: blur(20px);
        -webkit-backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        z-index: 1;
        animation: cardEntry 0.6s ease-out;
    }

    @@keyframes cardEntry {
        from {
            opacity: 0;
            transform: translateY(30px) scale(0.95);
        }

        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }

    .register-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15), 0 0 0 1px rgba(255, 255, 255, 0.1);
    }

    .register-title {
        font-size: 2.5rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 2rem;
        color: white;
        letter-spacing: -0.02em;
        line-height: 1.2;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-floating {
        margin-bottom: 1.5rem;
        position: relative;
    }

        .form-floating .form-control,
        .form-floating .form-select {
            height: 56px;
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.15);
            background: rgba(255, 255, 255, 0.05);
            padding: 1.2rem 1rem 0.4rem;
            font-size: 1rem;
            color: white;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }

            .form-floating .form-control::placeholder,
            .form-floating .form-select option {
                color: rgba(255, 255, 255, 0.5);
            }

            .form-floating .form-control:focus,
            .form-floating .form-select:focus {
                border-color: rgba(255, 255, 255, 0.3);
                background: rgba(255, 255, 255, 0.1);
                box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.1), 0 4px 12px rgba(0, 0, 0, 0.15);
                outline: none;
                transform: translateY(-1px);
            }

        .form-floating label {
            position: absolute;
            top: 18px;
            left: 16px;
            color: rgba(255, 255, 255, 0.7);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            pointer-events: none;
            font-weight: 500;
            font-size: 1rem;
        }

        .form-floating .form-control:focus + label,
        .form-floating .form-control:not(:placeholder-shown) + label,
        .form-floating .form-select:focus + label,
        .form-floating .form-select:valid + label {
            top: 8px;
            left: 16px;
            font-size: 0.75rem;
            color: rgba(255, 255, 255, 0.9);
            font-weight: 600;
            transform: translateY(0);
        }

    .form-select {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='rgba%28255,255,255,0.7%29' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m1 6 7 7 7-7'/%3e%3c/svg%3e");
    }

        .form-select option {
            background: #1a1a2e;
            color: white;
        }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        padding: 1rem 2rem;
        font-size: 1.1rem;
        font-weight: 600;
        border-radius: 16px;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 4px 16px rgba(102, 126, 234, 0.4);
        width: 100%;
        margin-top: 1rem;
        color: white;
        position: relative;
        overflow: hidden;
        letter-spacing: 0.025em;
    }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(102, 126, 234, 0.5);
        }

            .btn-primary:hover::before {
                left: 100%;
            }

        .btn-primary:active {
            transform: translateY(-1px);
            transition: transform 0.1s;
        }

    .validation-message,
    .text-danger {
        color: #ff6b6b;
        font-size: 0.875rem;
        font-weight: 500;
        margin-top: 0.5rem;
        display: block;
        background: rgba(255, 107, 107, 0.1);
        padding: 0.5rem 0.75rem;
        border-radius: 8px;
        border-left: 3px solid #ff6b6b;
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
    }

    /* Responsive Design */
    @@media (max-width: 640px) {
        .register-container {
            padding: 1rem;
        }

        .register-card {
            padding: 2rem 1.5rem;
        }

        .register-title {
            font-size: 2rem;
        }
    }

    /* Loading Animation */
    .btn-primary:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    /* Focus improvements for accessibility */
    .form-control:focus,
    .form-select:focus,
    .btn-primary:focus {
        outline: 2px solid rgba(255, 255, 255, 0.5);
        outline-offset: 2px;
    }

    /* Smooth animations for form interactions */
    .form-floating .form-control,
    .form-floating .form-select {
        animation: fadeInUp 0.5s ease-out;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .form-floating label {
        position: absolute;
        top: 50%; /* وضعه في المنتصف عمودياً */
        left: 16px;
        transform: translateY(-50%); /* تحريكه لأعلى بمقدار نصف ارتفاعه */
        color: rgba(255, 255, 255, 0.7);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        pointer-events: none;
        font-weight: 500;
        font-size: 1rem;
    }

    .form-floating .form-control:focus + label,
    .form-floating .form-control:not(:placeholder-shown) + label,
    .form-floating .form-select:focus + label
     {
        top: 8px; /* تحريكه لأعلى عند التركيز */
        left: 16px;
        font-size: 0.75rem;
        color: rgba(255, 255, 255, 0.9);
        font-weight: 600;
        transform: translateY(0); /* إعادة تعيين التحويل */
        display:none;
    }
</style>





<div class="register-container">
    <div class="register-card">
        <h1 class="register-title">New Account</h1>

        <StatusMessage Message="@Message" />

        <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="registerForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="form-floating">
                <InputText @bind-Value="Input.Name" class="form-control" placeholder=" " />
                <label class="form-check-label pb-2 mb-1">Full Name</label>
                <ValidationMessage For="() => Input.Name" class="text-danger" />
            </div>

            <div class="form-floating">
                <InputText @bind-Value="Input.Email" class="form-control" placeholder=" " />
                <label>Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" placeholder=" " />
                <label>Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-floating">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" placeholder=" " />
                <label>Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <div class="form-floating">
                <InputSelect class="form-select" @bind-Value="Input.Role">
                    <option value=""> </option>
                    <option value="Student">Student</option>
                    <option value="Instructor">Instructor</option>
                </InputSelect>
                <label>Role</label>
                <ValidationMessage For="() => Input.Role" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        if (!string.IsNullOrEmpty(Input.Role))
        {
            await UserManager.AddToRoleAsync(user, Input.Role);
        }

        if (Guid.TryParse(user.Id, out Guid userGuid))
        {
            if (Input.Role == "Student")
            {
                dbContext.Students.Add(new Student
                {
                    Id = userGuid,
                    Email = user.Email ?? "",
                    Name = Input.Name,
                    PhoneNumber = user.PhoneNumber ?? ""
                });
            }
            else if (Input.Role == "Instructor")
            {
                dbContext.Instructors.Add(new Instructor
                {
                    Id = userGuid,
                    Email = user.Email ?? "",
                    Name = Input.Name
                });
            }

            await dbContext.SaveChangesAsync();
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. Make sure it has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Full Name")]
        public string Name { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [Display(Name = "Role")]
        public string Role { get; set; } = "";
    }
}