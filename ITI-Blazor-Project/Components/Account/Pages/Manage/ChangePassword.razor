@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using ITI_Blazor_Project.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<style>
    .page-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #0f2027 0%, #203a43 50%, #2c5364 100%);
        padding: 3rem 1rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #374151;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    h3 {
        color: white;
        font-weight: 700;
        font-size: 2rem;
        letter-spacing: 0.07em;
        margin-bottom: 2rem;
        text-align: center;
    }

    .card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 24px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        max-width: 500px;
        width: 100%;
        padding: 2rem 2.5rem;
        border: 1px solid rgba(255, 255, 255, 0.3);
        backdrop-filter: blur(12px);
        transition: box-shadow 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 25px 45px rgba(0, 0, 0, 0.15);
        }

    .form-floating > input.form-control,
    .form-floating > .form-control {
        height: 3.6rem;
        font-size: 1rem;
        padding: 1rem 1rem 0.25rem;
    }

    label {
        color: #6b7280; /* gray-500 */
    }

    .btn-primary {
        background: linear-gradient(135deg, #43cea2 0%, #185a9d 100%);
        border: none;
        border-radius: 14px;
        padding: 0.75rem 1.75rem;
        font-weight: 700;
        box-shadow: 0 6px 18px rgba(67, 206, 162, 0.4);
        color: white;
        cursor: pointer;
        user-select: none;
        display: inline-flex;
        justify-content: center;
        gap: 0.5rem;
        transition: box-shadow 0.3s ease, transform 0.2s ease;
        width: 100%;
        font-size: 1.1rem;
    }

        .btn-primary:hover {
            box-shadow: 0 12px 28px rgba(67, 206, 162, 0.6);
            transform: translateY(-3px);
            color: white;
            text-decoration: none;
        }

    .text-danger {
        font-weight: 600;
        font-size: 0.9rem;
    }
</style>

<div class="page-container">
    <h3>Change password</h3>

    <StatusMessage Message="@message" />

    <div class="card">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post" class="needs-validation" novalidate>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-4">
                <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
                <label for="old-password" class="form-label">Old password</label>
                <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
            </div>

            <div class="form-floating mb-4">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                <label for="new-password" class="form-label">New password</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>

            <div class="form-floating mb-4">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                <label for="confirm-password" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <button type="submit" class="btn-primary">Update password</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(", ", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
