@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ITI_Blazor_Project.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage email</PageTitle>

<style>
    .page-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #0f2027 0%, #203a43 50%, #2c5364 100%);
        padding: 3rem 1rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #374151;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    h3 {
        color: white;
        font-weight: 700;
        font-size: 2rem;
        letter-spacing: 0.07em;
        margin-bottom: 2rem;
        text-align: center;
    }

    .card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 24px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        max-width: 520px;
        width: 100%;
        padding: 2rem 2.5rem;
        border: 1px solid rgba(255, 255, 255, 0.3);
        backdrop-filter: blur(12px);
        transition: box-shadow 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 25px 45px rgba(0, 0, 0, 0.15);
        }

    .form-floating > input.form-control,
    .form-floating > .form-control {
        height: 3.6rem;
        font-size: 1rem;
        padding: 1rem 1rem 0.25rem;
    }

    label {
        color: #6b7280; /* gray-500 */
    }

    .btn-primary {
        background: linear-gradient(135deg, #43cea2 0%, #185a9d 100%);
        border: none;
        border-radius: 14px;
        padding: 0.75rem 1.75rem;
        font-weight: 700;
        box-shadow: 0 6px 18px rgba(67, 206, 162, 0.4);
        color: white;
        cursor: pointer;
        user-select: none;
        display: inline-flex;
        justify-content: center;
        gap: 0.5rem;
        transition: box-shadow 0.3s ease, transform 0.2s ease;
        width: 100%;
        font-size: 1.1rem;
    }

        .btn-primary:hover {
            box-shadow: 0 12px 28px rgba(67, 206, 162, 0.6);
            transform: translateY(-3px);
            color: white;
            text-decoration: none;
        }

    .btn-link {
        font-weight: 600;
        color: #43cea2;
        cursor: pointer;
        padding-left: 0;
    }

        .btn-link:hover {
            text-decoration: underline;
            color: #185a9d;
        }

    .input-group {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .input-group-append {
        display: flex;
        align-items: center;
        padding-left: 0.5rem;
        color: #10b981; /* Tailwind emerald-500 */
        font-weight: 700;
        font-size: 1.4rem;
    }

    .text-danger {
        font-weight: 600;
        font-size: 0.9rem;
    }

</style>

<div class="page-container">
    <h3>Manage email</h3>

    <StatusMessage Message="@message" />

    <div class="card">
        <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
            <AntiforgeryToken />
        </form>

        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            @if (isEmailConfirmed)
            {
                <div class="form-floating mb-4 input-group">
                    <input type="text" value="@email" class="form-control" placeholder="Please enter your email." disabled />
                    <div class="input-group-append" aria-label="Email confirmed">
                        <span title="Email confirmed">✓</span>
                    </div>
                    <label for="email" class="form-label">Email</label>
                </div>
            }
            else
            {
                <div class="form-floating mb-4">
                    <input type="text" value="@email" class="form-control" placeholder="Please enter your email." disabled />
                    <label for="email" class="form-label">Email</label>
                    <button type="submit" class="btn btn-link" form="send-verification-form">Send verification email</button>
                </div>
            }

            <div class="form-floating mb-4">
                <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Please enter new email." />
                <label for="new-email" class="form-label">New email</label>
                <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
            </div>

            <button type="submit" class="btn-primary">Change email</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
