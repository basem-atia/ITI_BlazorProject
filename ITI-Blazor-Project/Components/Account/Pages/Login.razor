@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ITI_Blazor_Project.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Login</PageTitle>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        background-attachment: fixed;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        padding: 2rem;
        position: relative;
        overflow: hidden;
    }

        .login-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%), radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%);
            animation: backgroundMove 20s ease-in-out infinite;
        }

    @@keyframes backgroundMove {
        0%, 100% {
            opacity: 1;
            transform: scale(1);
        }

        50% {
            opacity: 0.8;
            transform: scale(1.1);
        }
    }

    .login-form {
        background: rgba(255, 255, 255, 0.08);
        border-radius: 24px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12), 0 0 0 1px rgba(255, 255, 255, 0.05), inset 0 1px 0 rgba(255, 255, 255, 0.1);
        padding: 3rem 2.5rem;
        width: 100%;
        max-width: 420px;
        backdrop-filter: blur(20px);
        -webkit-backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        z-index: 1;
        animation: cardEntry 0.6s ease-out;
    }

    @@keyframes cardEntry {
        from {
            opacity: 0;
            transform: translateY(30px) scale(0.95);
        }

        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }

    .login-form:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15), 0 0 0 1px rgba(255, 255, 255, 0.1);
    }

    .login-form h2 {
        font-size: 2.25rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 2rem;
        color: white;
        letter-spacing: -0.02em;
        line-height: 1.2;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-floating {
        margin-bottom: 1.5rem;
        position: relative;
        animation: fadeInUp 0.5s ease-out forwards;
        opacity: 0;
        transform: translateY(20px);
    }

        .form-floating:nth-of-type(1) {
            animation-delay: 0.1s;
        }

        .form-floating:nth-of-type(2) {
            animation-delay: 0.2s;
        }

        .form-floating .form-control {
            height: 56px;
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.15);
            background: rgba(255, 255, 255, 0.05);
            padding: 1.2rem 1rem 0.4rem;
            font-size: 1rem;
            color: white;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }

            .form-floating .form-control::placeholder {
                color: rgba(255, 255, 255, 0.5);
            }

            .form-floating .form-control:focus {
                border-color: rgba(255, 255, 255, 0.3);
                background: rgba(255, 255, 255, 0.1);
                box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.1), 0 4px 12px rgba(0, 0, 0, 0.15);
                outline: none;
                transform: translateY(-1px);
            }

        .form-floating label {
            position: absolute;
            top: 18px;
            left: 16px;
            color: rgba(255, 255, 255, 0.7);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            pointer-events: none;
            font-weight: 500;
            font-size: 1rem;
        }

        .form-floating .form-control:focus + label,
        .form-floating .form-control:not(:placeholder-shown) + label {
            top: 8px;
            left: 16px;
            font-size: 0.75rem;
            color: rgba(255, 255, 255, 0.9);
            font-weight: 600;
            transform: translateY(0);
        }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
        animation: fadeInUp 0.5s ease-out forwards;
        opacity: 0;
        transform: translateY(20px);
        animation-delay: 0.3s;
        padding: 0.5rem 0;
    }

    .form-check-input {
        width: 1.25rem;
        height: 1.25rem;
        margin: 0;
        vertical-align: middle;
        cursor: pointer;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.3);
        border-radius: 4px;
        transition: all 0.3s ease;
    }

        .form-check-input:checked {
            background: rgba(255, 255, 255, 0.9);
            border-color: rgba(255, 255, 255, 0.9);
        }

        .form-check-input:focus {
            box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.2);
            outline: none;
        }

    .form-check-label {
        font-weight: 500;
        color: rgba(255, 255, 255, 0.9);
        user-select: none;
        cursor: pointer;
        font-size: 0.95rem;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        padding: 1rem 2rem;
        font-size: 1.1rem;
        font-weight: 600;
        border-radius: 16px;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 4px 16px rgba(102, 126, 234, 0.4);
        width: 100%;
        margin-top: 1rem;
        color: white;
        position: relative;
        overflow: hidden;
        letter-spacing: 0.025em;
        animation: fadeInUp 0.5s ease-out forwards;
        opacity: 0;
        transform: translateY(20px);
        animation-delay: 0.4s;
    }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(102, 126, 234, 0.5);
        }

            .btn-primary:hover::before {
                left: 100%;
            }

        .btn-primary:active {
            transform: translateY(-1px);
            transition: transform 0.1s;
        }

    .text-danger,
    .validation-message {
        color: #ff6b6b;
        font-size: 0.875rem;
        font-weight: 500;
        margin-top: 0.5rem;
        display: block;
        background: rgba(255, 107, 107, 0.1);
        padding: 0.5rem 0.75rem;
        border-radius: 8px;
        border-left: 3px solid #ff6b6b;
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
    }

    .alert-danger {
        color: #ff6b6b;
        background: rgba(255, 107, 107, 0.1);
        border: 1px solid rgba(255, 107, 107, 0.2);
        border-radius: 12px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        font-weight: 500;
        text-align: center;
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        animation: fadeInUp 0.5s ease-out;
    }

    .mt-3 {
        margin-top: 2rem;
        text-align: center;
        animation: fadeInUp 0.5s ease-out forwards;
        opacity: 0;
        transform: translateY(20px);
        animation-delay: 0.5s;
    }

        .mt-3 a {
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            font-weight: 500;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            display: inline-block;
            margin: 0.25rem 0;
        }

            .mt-3 a:hover {
                color: white;
                text-decoration: underline;
                transform: translateY(-1px);
            }

    /* Responsive Design */
    @@media (max-width: 640px) {
        .login-container {
            padding: 1rem;
        }

        .login-form {
            padding: 2rem 1.5rem;
        }

            .login-form h2 {
                font-size: 2rem;
            }
    }

    /* Loading Animation */
    .btn-primary:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    /* Focus improvements for accessibility */
    .form-control:focus,
    .btn-primary:focus {
        outline: 2px solid rgba(255, 255, 255, 0.5);
        outline-offset: 2px;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .form-floating label {
        position: absolute;
        top: 50%; /* وضعه في المنتصف عمودياً */
        left: 16px;
        transform: translateY(-50%); /* تحريكه لأعلى بمقدار نصف ارتفاعه */
        color: rgba(255, 255, 255, 0.7);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        pointer-events: none;
        font-weight: 500;
        font-size: 1rem;
    }

    .form-floating .form-control:focus + label,
    .form-floating .form-control:not(:placeholder-shown) + label,
    .form-floating .form-select:focus + label,
    .form-floating .form-select:valid + label {
        top: 8px; /* تحريكه لأعلى عند التركيز */
        left: 16px;
        font-size: 0.75rem;
        color: rgba(255, 255, 255, 0.9);
        font-weight: 600;
        transform: translateY(0); /* إعادة تعيين التحويل */
        display:none;
    }
</style>





<div class="login-container">
    <div class="login-form">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger text-center" role="alert">
                @errorMessage
            </div>
        }

        <EditForm Model="Input" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <h2>Access your account</h2>

            <ValidationSummary class="text-danger" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" placeholder=" " />
                <label>Email</label>
                <ValidationMessage For="@(() => Input.Email)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Password" type="password" class="form-control" placeholder=" " />
                <label>Password</label>
                <ValidationMessage For="@(() => Input.Password)" class="text-danger" />
            </div>

            @* <div class="form-check mb-3">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                <label class="form-check-label">Remember me</label>
            </div> *@
            <div class="form-check">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                <label class="form-check-label" for="rememberMe">Remember me</label>
            </div>


            <button type="submit" class="w-100 btn btn-lg btn-primary">Login</button>

            <div class="mt-3 text-center">
                <a href="@NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })">
                    Register as a new user
                </a><br />
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}